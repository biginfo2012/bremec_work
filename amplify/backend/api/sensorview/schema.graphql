type SensorValue @model (subscriptions: null)
@auth (
    rules: [
        { allow: private, provider: iam},
        { allow: private, provider: userPools}
    ]
) 
{
  id: ID!
  sensorId: String!
  efficiency: String!
  efficiency2: String
  status: String!
  isWarning: Boolean!
}

type Subscription {
  onCreateSensorValue(sensorId: String!): SensorValue @aws_subscribe(mutations: ["createSensorValue"])
}

type Sensor
{
  sensorId: String!
  sensorType: String!
}

type Query {
  getSensor(sensorId: String!): Sensor @function(name: "sensorview-get-sensor-${env}")
}

type SensorDef @model (subscriptions: null)
@auth (
    rules: [
        { allow: private, provider: iam},
        { allow: private, provider: userPools}
    ]
) 
{
  id: ID!
  Email: String!
  Sensors: [Sensors!] @connection(keyName: "byEmail", fields: ["Email"])
  CompanyName: String
  PhoneNumber: String
  RegisteredCountry: String
  RegisteredCity: String
  RegisteredAddress: String
  RegisteredZipCode: String
  OperativeCountry: String
  OperativeCity: String
  OperativeAddress: String
  OperativeZipCode: String
  P_IVA: String
  SDI: String
  PECEmail: String
}

type Sensors @model (subscriptions: null)
@auth (
    rules: [
        { allow: private, provider: iam},
        { allow: private, provider: userPools}
    ]
)
@key(name: "byEmail", fields: ["Email"], queryField: "sensorsByEmail")
{
  id: ID!
  Email: String!
  SensorsId: ID!
  SensorName: String!
  SensorFriendlyName: String!
}